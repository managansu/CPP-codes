#include<bits/stdc++.h>
#define int long long
using namespace std;
int n, m;
vector<int> a, seg, lazy;

void build(int ind, int low, int high){
    if(low == high){
        seg[ind] = a[low];
        return;
    }
    int mid = (low + high) / 2;
    build(2 * ind + 1, low, mid);
    build(2 * ind + 2, mid + 1, high);
    seg[ind] = min(seg[2 * ind + 1], seg[2 * ind + 2]);
}

void update(int ind, int low, int high, int l, int r, int val){
    if(lazy[ind] != 0){
        seg[ind] += lazy[ind];
        if(low != high){
            lazy[2 * ind + 1] += lazy[ind];
            lazy[2 * ind + 2] += lazy[ind];
        }
        lazy[ind] = 0;
    }
    if(r < low || l > high || low > high) return;
    if(low >= l && high <= r){
        seg[ind] += val;
        if(low != high){
            lazy[2 * ind + 1] += val;
            lazy[2 * ind + 2] += val;
        }
        return;
    }
    int mid = (low + high) >> 1;
    update(2 * ind + 1, low, mid, l, r, val);
    update(2 * ind + 2, mid + 1, high, l, r, val);
    seg[ind] = min(seg[2 * ind + 1], seg[2 * ind + 2]);
}

int query(int ind, int low, int high, int l, int r){
    if(lazy[ind] != 0){
        seg[ind] += lazy[ind];
        if(low != high){
            lazy[2 * ind + 1] += lazy[ind];
            lazy[2 * ind + 2] += lazy[ind];
        }
        lazy[ind] = 0;
    }
    if(r < low || l > high || low > high) return INT_MAX;
    if(low >= l && high <= r){
        return seg[ind];
    }
    int mid = (low + high) >> 1;
    return min(query(2 * ind + 1, low, mid, l, r), query(2 * ind + 2, mid + 1, high, l, r));
}

void test_cases(){
    cin >> n;
    a.resize(n);
    for(int i = 0; i < n; i++){
        cin >> a[i];
    }
    seg.assign(5 * n + 5, 0);
    lazy.assign(5 * n + 5, 0);
    build(0, 0, n - 1);
    cin >> m;
    m++;
    while(m--){
        string line;
        getline(cin, line);
        istringstream iss(line);
        vector<int> b;
        int tmp;
        while (iss >> tmp) {
            b.push_back(tmp);
            iss.ignore(1, ',');
        }
        if((int)b.size() == 2){
            if(b[0] <= b[1]){
                cout << query(0, 0, n - 1, b[0], b[1]) << "\n";
            }
            else{
                cout << min(query(0, 0, n - 1, b[0], n - 1), query(0, 0, n - 1, 0, b[1])) << "\n";
            }
        }
        else if((int)b.size() == 3){
            if(b[0] <= b[1]){
                update(0, 0, n - 1, b[0], b[1], b[2]);
            }
            else{
                update(0, 0, n - 1, b[0], n, b[2]);
                update(0, 0, n - 1, 0, b[1], b[2]);
            }
        }
    }
}

int32_t main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int tt = 1;
    while(tt--){
        test_cases();
    }
    return 0;
}
